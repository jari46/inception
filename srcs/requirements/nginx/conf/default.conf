# 모든 directive는 상속되어 적용된다.

server {
# listen: 요청의 URI가 https://0.0.0.0:443인지 확인한다. (우리의 경우 https://127.0.0.1:443)
    listen      443 ssl;

# server_name: 요청의 Host header field가 yehan.42.fr인지 확인한다.
    server_name  yehan.42.fr www.yehan.42.fr localhost;

# root: 파일을 찾기 위해 살펴 볼 디렉토리. wordpress Dockerfile에 의해 /var/www/html에는 wordpress가 설치되어 있다.
    root    /var/www/html;

# index: 클라이언트가 디렉토리를 요청했을 때 보여주어야 하는 디폴트 파일
    index index.php index.html index.htm;

# ssl_certificate
    ssl_certificate     /etc/nginx/ssl/yehan.42.fr.crt;
    ssl_certificate_key /etc/nginx/ssl/yehan.42.fr.key;
    ssl_protocols       TLSv1.2 TLSv1.3;

# location: 요청의 request target과 일치하는지 확인한다.
# ~: 정규식으로 표현되었음을 명시
# \.php$: .php로 끝나는 request target
    location ~ \.php$ {
    # try_files: 찾으려는 리소스가 없을 때 앞에서부터 순서대로 트라이한다.
    # (example.com/page?foo=bar&baz=qux 와 같은 요청이 들어왔을 때 
    # $uri = example.com/page, $is_args = ?, $args = foo=bar&baz=qux와 같이 세팅된다.)
    # =404: 없을 경우 404 에러를 리턴한다.
         try_files $uri /index.php =404;
         
    # fastcgi_pass: PHP 요청을 처리할 FastCGI 서버의 위치
         fastcgi_pass   wordpress:9000;
    
    # fastcgi_index: 특정 파일이 요청되지 않은 경우 제공되어야 하는 기본 PHP 파일
         fastcgi_index  index.php;
    
    # fastcgi_param: conf 폴더에 있는 파일
    #   SCRIPT_FILENAME: 요청된 PHP파일의 전체 경로. 이를 실행하게 된다.
    #                    예를 들어, root인 /var/www/html를 붙여서, /var/www/html/path/to/script.php
         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

    # include: FastCGI 관련 세팅이 있는 설정파일 'fastcgi_params'를 인클루드한다
          include fastcgi_params;
      }
}
