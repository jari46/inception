# version
# (default: COMPOSE_SPEC에 지정된 버전 혹은 "3")

# services의 옵션
#
# container_name: 컨테이너 이름
# build:
#   context: Docker가 이 디렉토리와 하위 디렉토리에서 Dockerfile과 관련 파일을 찾아 이미지를 빌드하게 된다
#   dockerfile: Dockerfile이 있는 경로
# args: docker-compose 명령어에서 포함한 env파일 중에 어떤 것만 가져와서 쓸 것인지 명시
# ports: 호스트OS와 컨테이너 포트를 바인딩
# depends_on: 서비스 간의 종속성 순서대로 서비스를 시작할 수 있다
#             (단 앞의 것의 실행이 끝날 때까지 기다려주지 않음)
# env_file: 파일을 읽어와서 컨테이너의 환경변수로 사용
# volumes: 컨테이너에 볼륨을 마운트
# networks: 내부내트워크에 연결
# restart: 성공적으로 시작(10초 경과)된 후에 적용된다. (default: no)

# volumes의 옵션
# : 컨테이너가 데이터를 사용하고 저장할 수 있는 새 볼륨을 생성한다.
#
# driver: 사용할 볼륨 드라이버를 지정. local일 경우 볼륨이 호스트 파일시스템에 저장됨 (default: local)
# name: 볼륨에 부여할 이름
# o: 볼륨 마운트 옵션의 목록. bind는 볼륨이 바인드마운트됨을 의미
# type: 사용할 드라이버의 유형. none은 특정유형이 필요하지 않음을 의미
# device: 마운트할 디렉토리 또는 파일의 경로

# networks의 옵션
#
# name: 네트워크 이름
# driver: 네트워크 방법을 결정한다. bringe 드라이버는 단일 호스트에서 사설 내부 네트워크를 만들어 여러 컨테이너가 통신하려고 할 때 가장 일반적으로 사용된다. (default: bridge)

version: '3'

services:
  nginx:
    build:
      context: .
      dockerfile: requirements/nginx/Dockerfile
    container_name: nginx
    depends_on:
      - wordpress
    image: nginx
    ports:
      - "443:443"
    networks:
      - inception
    volumes:
      - wp-volume:/var/www/html
    restart: always

  mariadb:
    build:
      context: .
      dockerfile: requirements/mariadb/Dockerfile
      args:
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
        DB_ROOT: ${DB_ROOT}
    container_name: mariadb
    image: mariadb
    ports:
      - "3306:3306"
    networks:
      - inception
    volumes:
      - db-volume:/var/lib/mysql
    restart: always

  wordpress:
    build:
      context: .
      dockerfile: requirements/wordpress/Dockerfile
      args:
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
    env_file:
      - .env
    container_name: wordpress
    depends_on:
      - mariadb
    image: wordpress
    restart: always
    networks:
      - inception
    volumes:
      - wp-volume:/var/www/html

  redis:
    build:
      context: .
      dockerfile: requirements/bonus/redis/Dockerfile
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    networks:
      - inception
    restart: always

  vsftpd:
    build:
      context: .
      dockerfile: requirements/bonus/vsftpd/Dockerfile
      args:
        FTP_USR: ${FTP_USR}
        FTP_PWD: ${FTP_PWD}
    container_name: vsftpd
    image: vsftpd
    ports:
      - "21:21"
    volumes:
      - wp-volume:/var/www/html
    networks:
     - inception
    restart: always

  adminer:
    build:
      context: .
      dockerfile: requirements/bonus/adminer/Dockerfile
    container_name: adminer
    depends_on:
      - mariadb
    image: adminer
    ports:
      - "8080:8080"
    networks:
     - inception
    restart: always

  website:
    build:
      context: .
      dockerfile: requirements/bonus/website/Dockerfile
    container_name: website
    image: website
    ports:
      - "1000:1000"
    restart: always

  flask:
    build:
      context: .
      dockerfile: requirements/bonus/flask/Dockerfile
    container_name: flask
    image: flask
    ports:
      - "5000:5000"
    restart: always


volumes:
  wp-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/wordpress

  db-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/mariadb

networks:
    inception:
        driver: bridge
